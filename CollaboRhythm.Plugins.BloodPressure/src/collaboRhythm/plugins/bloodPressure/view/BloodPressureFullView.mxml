<?xml version="1.0" encoding="utf-8"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:view="collaboRhythm.plugins.bloodPressure.view.*"
		 xmlns:simulation="collaboRhythm.plugins.bloodPressure.view.simulation.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)"
		 clipAndEnableScrolling="true"
		 implements="mx.managers.IFocusManagerComponent, collaboRhythm.plugins.bloodPressure.view.IBloodPressureFullView"
		>
	<fx:Style source="/defaults.css" />

	<mx:HDividedBox height="100%" width="100%" paddingRight="0" clipContent="true" horizontalScrollPolicy="off"
					verticalScrollPolicy="off" backgroundColor="#F1F2F2"
					dividerSkin="collaboRhythm.shared.view.skins.FlatRectBoxDividerSkin">


		<s:VGroup id="leftGroup" height="100%" width="100%" gap="15" paddingLeft="0" paddingRight="0" paddingTop="0"
				  paddingBottom="0">

			<!--
			<s:Group width="100%">
				<buttons:ContentLabel
						id="hypertensionTitle" horizontalCenter="0"
						width="400" height="60"
						text="Hypertension"
						>
					<buttons:leftContent>
						<simulation:ProblemsIcon left="15" verticalCenter="0"/>
					</buttons:leftContent>
					<buttons:rightContent>
						<simulation:HypertensionGauge id="hypertensionGauge" right="10" verticalCenter="0"
													  value="{model.simulation.systolic}"/>
					</buttons:rightContent>
				</buttons:ContentLabel>
			</s:Group>
-->

			<view:BloodPressureSynchronizedCharts id="chartsGroup" modality="{modality}" model="{model}"/>
		</s:VGroup>
		<s:VGroup id="simulationGroup" height="100%" gap="15" paddingLeft="0" paddingRight="0" paddingTop="5"
				  clipAndEnableScrolling="true"
				  paddingBottom="8"
				  width="{SIMULATION_VIEW_WIDTH + simulationGroup.paddingLeft + simulationGroup.paddingRight}"
				> <!-- TODO: paddingBottom should be the same as the chartsGroup, but one or both of these components have some internal padding (the ScrubChart currently has an extra 15 paddingBottom "built in" to the footer) -->
			<simulation:SimulationView id="simulationView" height="100%" width="100%"
					/>
			<!--
			   doubleClickEnabled="true"
										  doubleClick="simulationView_doubleClickHandler(event)"
   -->
		</s:VGroup>
	</mx:HDividedBox>
	<fx:Script><![CDATA[
		import collaboRhythm.shared.apps.bloodPressure.model.BloodPressureModel;

		import mx.events.FlexEvent;

		private static const SIMULATION_VIEW_WIDTH:int = 680;

		private var simulationOnlyViewMode:Boolean = false;
		private var _chartsOnlyViewMode:Boolean = false;
		private var _model:BloodPressureModel;
		private var _modality:String;

		protected function simulationView_doubleClickHandler(event:MouseEvent):void
		{
			simulationOnlyViewMode = !simulationOnlyViewMode;
			updateComponentsForSimulationOnlyViewMode();
		}

		private function updateComponentsForSimulationOnlyViewMode():void
		{
			if (simulationOnlyViewMode)
			{
				chartsGroup.percentWidth = 0;
				chartsGroup.visible = false;
				simulationGroup.width = NaN;
				simulationGroup.percentWidth = 100;
				simulationGroup.visible = true;
			}
			else if (chartsOnlyViewMode)
			{
				chartsGroup.percentWidth = 100;
				chartsGroup.visible = true;
				simulationGroup.width = NaN;
				simulationGroup.percentWidth = 0;
				simulationGroup.visible = false;
			}
			else
			{
				chartsGroup.percentWidth = 100;
				chartsGroup.visible = true;
				simulationGroup.percentWidth = NaN;
				simulationGroup.width = SIMULATION_VIEW_WIDTH + simulationGroup.paddingLeft +
						simulationGroup.paddingRight;
				simulationGroup.visible = true;
			}
		}

		private function creationCompleteHandler(event:FlexEvent):void
		{
			updateComponentsForSimulationOnlyViewMode();
			initializeSimulationView();
		}

		public function get chartsOnlyViewMode():Boolean
		{
			return _chartsOnlyViewMode;
		}

		public function set chartsOnlyViewMode(value:Boolean):void
		{
			_chartsOnlyViewMode = value;
		}

		[Bindable]
		public function get model():BloodPressureModel
		{
			return _model;
		}

		public function set model(value:BloodPressureModel):void
		{
			_model = value;

			initializeSimulationView();
//			if (chartsGroup)
//				chartsGroup.model = model;
		}

		public function refresh():void
		{
			if (chartsGroup)
			{
				chartsGroup.refresh();
			}
			if (simulationView)
			{
				initializeSimulationView();
			}
		}

		[Bindable]
		public function get modality():String
		{
			return _modality;
		}

		public function set modality(value:String):void
		{
			_modality = value;
		}

		private function initializeSimulationView():void
		{
			if (simulationView)
			{
				simulationView.initializeModel(model.focusSimulation, model);
				simulationView.refresh();
			}
		}
		]]></fx:Script>
</s:Group>
