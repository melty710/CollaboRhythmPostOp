<?xml version="1.0"?>
<!--~
  ~ Copyright 2011 John Moore, Scott Gilroy
  ~
  ~ This file is part of CollaboRhythm.
  ~
  ~ CollaboRhythm is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
  ~ License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later
  ~ version.
  ~
  ~ CollaboRhythm is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  ~ details.
  ~
  ~ You should have received a copy of the GNU General Public License along with CollaboRhythm.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->
<view:SimulationLevelGroup
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:circulatorysystem="collaboRhythm.plugins.bloodPressure.view.simulation.levels.circulatorySystem.*"
		xmlns:view="collaboRhythm.simulation.view.*"
		width="100%" height="100%"
		title="Circulatory System"
		resize="resizeHandler(event)"
		>
	<circulatorysystem:HypertensionCirculatorySystemSimulationView id="circulatorySystemSimulationView" width="360"
																   height="600" loadSimulationOnCreateChildren="{!BloodPressureAppController.useSingleCirculatorySystemMovieClip}"
																   currentDamage="{simulationModel.damage}"
																   currentPreload="{simulationModel.preload}"
																   currentContractility="{simulationModel.contractility}"
																   currentAfterload="{simulationModel.afterload}"/>
	<s:Group id="arrowsGroup" width="100%" height="100%"/>
	<fx:Script><![CDATA[
		import collaboRhythm.plugins.bloodPressure.controller.BloodPressureAppController;
		import collaboRhythm.shared.apps.healthCharts.model.MedicationComponentAdherenceModel;
		import collaboRhythm.shared.apps.healthCharts.model.SimulationModel;
		import collaboRhythm.shared.model.healthRecord.util.MedicationName;
		import collaboRhythm.shared.model.healthRecord.util.MedicationNameUtil;
		import collaboRhythm.simulation.view.SimulationLevelEvent;
		import collaboRhythm.simulation.view.buttons.ExpandCollapseEvent;
		import collaboRhythm.simulation.view.buttons.SimulationDetail;
		import collaboRhythm.simulation.view.buttons.SimulationDetailButton;
		import collaboRhythm.simulation.view.buttons.StepListItem;
		import collaboRhythm.shared.ui.healthCharts.view.MedicationScheduleItemChartView;

		import com.theory9.data.types.OrderedMap;

		import mx.collections.ArrayCollection;
		import mx.collections.IList;
		import mx.events.MoveEvent;
		import mx.events.PropertyChangeEvent;
		import mx.events.ResizeEvent;
		import mx.logging.ILogger;
		import mx.logging.Log;

		private const kidneyPoint:Point = new Point(206, 476);
		private const heartPoint:Point = new Point(247, 295);
		private const arteriolesPoint:Point = new Point(260, 403);

		protected var _logger:ILogger;

		private var buttonsMap:OrderedMap = new OrderedMap();

		override protected function createChildren():void
		{
			_logger = Log.getLogger(getQualifiedClassName(this).replace("::", "."));

			super.createChildren();
			createDetailButtons();
		}

		private function createDetailButtons():void
		{
			if (simulationModel && simulationModel.medications && buttonsMap.length == 0)
			{
				if (buttonsMap.length > 0)
				{
					// to support dynamically changing medications after initial load, we would need to remove existing buttons here
				}

				details = new Vector.<SimulationDetail>();
				for each (var medicationModel:MedicationComponentAdherenceModel in simulationModel.medications)
				{
					var button:SimulationDetailButton = new SimulationDetailButton();
					button.x = detailButtonX;
					medicationModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
							medicationModel_propertyChangeHandler, false, 0, true);
					updateButtonListDataProvider(button, medicationModel);
					var medicationName:MedicationName = MedicationNameUtil.parseName(medicationModel.name.text);
					button.label = medicationName.medicationName;
					button.subtitle = medicationModel.drugClass;
					button.drillDownEnabled = medicationModel.drugClass == SimulationModel.THIAZIDE_DIURETIC;
					button.addEventListener(SimulationLevelEvent.DRILL_DOWN_LEVEL,
							simulationDetailButton_drillDownLevelHandler, false, 0, true);
					button.addEventListener(MoveEvent.MOVE, simulationDetailButton_moveHandler, false, 0, true);
					button.addEventListener(ExpandCollapseEvent.EXPAND, simulationDetailButton_expandHandler, false, 0,
							true);
					button.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
							simulationDetailButton_propertyChangeHandler, false, 0, true);

					var medicationView:MedicationScheduleItemChartView = new MedicationScheduleItemChartView();
					medicationView.medicationScheduleItem = medicationModel.medicationScheduleItem;
					medicationView.left = 7;
					medicationView.verticalCenter = 0;
					medicationView.width = 32;
					medicationView.height = 32;
					button.leftContent = [medicationView];

					this.addElement(button);
					buttonsMap.addKeyValue(medicationModel.name.value, button);

					var indicatedPoint:Point = getIndicatedPoint(medicationModel);
					details.push(new SimulationDetail(indicatedPoint, button));
				}

				layoutDetailButtons();
			}
		}

		private function getIndicatedPoint(medicationModel:MedicationComponentAdherenceModel):Point
		{
			if (medicationModel.drugClass == SimulationModel.THIAZIDE_DIURETIC ||
					medicationModel.drugClass == SimulationModel.ACE_INHIBITOR ||
					medicationModel.drugClass == SimulationModel.ANGIOTENSIN_RECEPTOR_BLOCKER)
				return kidneyPoint;
			else if (medicationModel.drugClass == SimulationModel.BETA_BLOCKER ||
					medicationModel.drugClass == SimulationModel.CALCIUM_CHANNEL_BLOCKER)
				return heartPoint;
			else if (medicationModel.drugClass == SimulationModel.ALPHA_BLOCKER)
				return arteriolesPoint;
			else
				return null;
		}

		private function simulationDetailButton_expandHandler(event:ExpandCollapseEvent):void
		{
			for each (var button:SimulationDetailButton in buttonsMap.values())
			{
				if (button != event.target)
					button.expanded = false;
			}
		}

		private function simulationDetailButton_moveHandler(event:MoveEvent):void
		{
			drawArrows();
		}

		private function simulationDetailButton_drillDownLevelHandler(event:SimulationLevelEvent):void
		{
			var simulationDetailButton:SimulationDetailButton = event.target as SimulationDetailButton;
			if (!simulationDetailButton)
				throw new Error("simulationDetailButton_drillDownLevelHandler event target was not SimulationDetailButton");

			var key:String = buttonsMap.getKeyByValue(simulationDetailButton);

			if (!key)
				throw new Error("Failed to get medication code from buttonsMap.getKeyByValue(simulationDetailButton)");

			var medicationModel:MedicationComponentAdherenceModel = simulationModel.medicationsByCode.getValueByKey(key);
			var indicatedPoint:Point = getIndicatedPoint(medicationModel);

			// TODO: dispatch the correct drill down event based on which button is clicked
			if (indicatedPoint)
				dispatchEvent(new SimulationLevelEvent(SimulationLevelEvent.DRILL_DOWN_LEVEL, 0.02, 0.02,
						indicatedPoint.x, indicatedPoint.y));
		}

		private function medicationModel_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			var medicationModel:MedicationComponentAdherenceModel = event.source as MedicationComponentAdherenceModel;
			if (medicationModel == null)
				throw new Error("medicationModel_propertyChangeHandler event source was not a MedicationComponentAdherenceModel");

			var medicationCode:String = medicationModel.name.value;
			var button:SimulationDetailButton = buttonsMap.getValueByKey(medicationCode) as SimulationDetailButton;
			if (button == null)
				throw new Error("Failed to find SimulationDetailButton in buttonsMap for key " + medicationCode);
			updateButtonListDataProvider(button, medicationModel);
		}

		private function createStepsData(steps:Vector.<String>, concentrationSeverityColor:uint):IList
		{
			var result:ArrayCollection = new ArrayCollection();

			var i:int;
			for each (var step:String in steps)
			{
				i++;
				result.addItem(new StepListItem(step, concentrationSeverityColor));
			}

			return result;
		}

		private function simulationModel_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			if (event.property == "isInitialized")
			{
				createDetailButtons();
			}
		}

		public override function set simulationModel(value:SimulationModel):void
		{
			super.simulationModel = value;
			if (simulationModel)
			{
				simulationModel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,
						simulationModel_propertyChangeHandler);
			}
			createDetailButtons();
		}

		private function updateButtonListDataProvider(button:SimulationDetailButton,
													  medicationModel:MedicationComponentAdherenceModel):void
		{
			button.listDataProvider = createStepsData(medicationModel.steps,
					medicationModel.concentrationSeverityColor);
		}

		private function resizeHandler(event:ResizeEvent):void
		{
			layoutDetailButtons();
		}

		private function simulationDetailButton_propertyChangeHandler(event:PropertyChangeEvent):void
		{
			if (event.property == "bottomExpansion")
				layoutDetailButtons();
		}
		]]></fx:Script>
</view:SimulationLevelGroup>
