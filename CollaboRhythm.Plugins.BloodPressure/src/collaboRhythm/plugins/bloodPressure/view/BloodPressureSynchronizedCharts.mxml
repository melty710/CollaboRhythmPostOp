<?xml version="1.0"?>
<view2:SynchronizedHealthCharts xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
								xmlns:mx="library://ns.adobe.com/flex/mx"
								xmlns:view2="collaboRhythm.shared.ui.healthCharts.view.*"
								implements="collaboRhythm.plugins.bloodPressure.view.IBloodPressureFullView"
		>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script><![CDATA[
		import collaboRhythm.shared.model.healthRecord.document.VitalSignsModel;

		import mx.collections.ArrayCollection;

		override protected function get vitalSignChartCategories():ArrayCollection
		{
			var categories:ArrayCollection = super.vitalSignChartCategories;
			removeItem(categories, VitalSignsModel.SYSTOLIC_CATEGORY);
			removeItem(categories, VitalSignsModel.HEART_RATE_CATEGORY);
			return categories;
		}

		/*
		 public function drawBloodPressureData(canvas:DataDrawingCanvas):void
		 {
		 if (_traceEventHandlers)
		 trace(this + ".drawBloodPressureData");

		 canvas.clear();

		 canvas.lineStyle(1, GOAL_ZONE_COLOR);

		 // systolic normal
		 canvas.beginFill(GOAL_ZONE_COLOR, 0.2);
		 canvas.drawRect([Edge.LEFT, -1], SimulationModel.SYSTOLIC_GOAL, [Edge.RIGHT, 1], 90);
		 canvas.endFill();

		 //				// diastolic normal
		 //				canvas.beginFill(GOAL_ZONE_COLOR, 0.2);
		 //				canvas.drawRect(Edge.LEFT, 80, Edge.RIGHT, 60);
		 //				canvas.endFill();

		 if (canvas == bloodPressureMainCanvas)
		 {
		 canvas.updateDataChild(systolicZoneLabel, {left:Edge.LEFT, top:SimulationModel.SYSTOLIC_GOAL});
		 //				canvas.updateDataChild(diastolicZoneLabel, {left: Edge.LEFT, bottom: 60});
		 }
		 }
		 */

		// TODO: add support for modifying background elements and drawing on the canvas
		/*
		 private function updateBloodPressureChartBackgroundElements(chart:ScrubChart):void
		 {
		 chart.mainChart.backgroundElements.push(bloodPressureMainCanvas);
		 drawBloodPressureData(bloodPressureMainCanvas);

		 if (chart.rangeChart)
		 {
		 chart.rangeChart.backgroundElements.push(bloodPressureRangeCanvas);
		 drawBloodPressureData(bloodPressureRangeCanvas);
		 }
		 }
		 */

		/*
		 protected override function updateSimulationForCustomCharts():String
		 {
		 var dataIndexMessage:String = "";
		 if (_useBloodPressureChart)
		 {
		 var bloodPressureDataPoint:VitalSign;
		 var series:Series = bloodPressureChart.mainChart.series[0];
		 var chartItem:ChartItem;
		 if (series)
		 {
		 var dataCollection:ArrayCollection = series.dataProvider as ArrayCollection;
		 var bloodPressureDataIndex:int = bloodPressureChart.findPreviousDataIndex(dataCollection,
		 model.focusSimulation.date.time);
		 if (bloodPressureDataIndex != -1)
		 {
		 dataIndexMessage = " (" + (bloodPressureDataIndex + 1) + " of " + dataCollection.length + ")";
		 bloodPressureDataPoint = dataCollection.getItemAt(bloodPressureDataIndex) as VitalSign;
		 series.selectedIndex = bloodPressureDataIndex;
		 if (series.items)
		 {
		 chartItem = series.items[bloodPressureDataIndex] as ChartItem;
		 }
		 }
		 }
		 if (chartItem)
		 bloodPressureChart.highlightChartItem(chartItem);
		 else
		 bloodPressureChart.hideDataPointHighlight();

		 if (shouldApplyChangesToSimulation)
		 {
		 model.focusSimulation.dataPointDate = bloodPressureDataPoint ==
		 null ? null : bloodPressureDataPoint.dateMeasuredStart;
		 model.focusSimulation.systolic = bloodPressureDataPoint ==
		 null ? NaN : bloodPressureDataPoint.resultAsNumber;
		 }
		 // TODO: fix diastolic
		 //			model.simulation.diastolic = bloodPressureDataPoint == null ? NaN : bloodPressureDataPoint.diastolic;

		 var hypertensionSeverity:Number = 0;
		 if (!isNaN(model.focusSimulation.systolic))
		 {
		 hypertensionSeverity = Math.max(0, (model.focusSimulation.systolic - 120) / 20);
		 }
		 }
		 //				simulationGlow.alpha = hypertensionSeverity;}
		 return dataIndexMessage;
		 }
		 */
		]]></fx:Script>
</view2:SynchronizedHealthCharts>
